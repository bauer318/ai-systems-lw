from simple_term_menu import TerminalMenu

from contentBasedRecomendationSystem.recomendation_strategy import RecommendationStrategy
from contentBasedRecomendationSystem.recomendattion_system import RecommendationSystem, \
    get_recommendation_after_filtration
from filter import Filter
from map_displayer import display_map
from measure_worker import calculate_measure_using_euclidean_distance, calculate_measure_using_cosine_distance

options = [
    "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏",
    "–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π",
    "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫",
    "–°–±—Ä–æ—Å–∏—Ç—å –ª–∞–π–∫",
    "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫",
    "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∑–ª–∞–π–∫",
    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
    "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
    "–í—ã–≤–µ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä",
    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –º–µ—Ä—ã",
    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é",
    "–í—ã—Ö–æ–¥"
]

main_filter = Filter()


def main_loop(recommendation_system: RecommendationSystem, liked_items, disliked_items) -> int:
    global main_filter
    terminal_menu = TerminalMenu(options)
    selected_menu_index = terminal_menu.show()
    match selected_menu_index:
        case 0:
            items = recommendation_system.query_all_items(None)
            for i, item in enumerate(items):
                liked = "" if i not in liked_items else "üëç"
                disliked = "" if i not in disliked_items else "üëé"
                print(
                    f"{i:2}) {liked:1} {disliked:1} {item.name} {item.brand}: {item.color} –º–∞—Å—Å–∞={item.weight} "
                    f"–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è={item.engine_capacity}")
            return 0
        case 1:
            display_map(recommendation_system.items, 'Euclidean distance', calculate_measure_using_euclidean_distance)
            display_map(recommendation_system.items, 'Cosine distance', calculate_measure_using_cosine_distance)
            return 0
        case 2:
            item_index_str = input()
            try:
                item_index_int = int(item_index_str)
            except:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ª–∞–π–∫–∞')
                return -1
            if item_index_int in disliked_items:
                print('–ú–æ—Ç–æ—Ü–∏–∫–ª —É–∂–µ –¥–∏–∑–ª–∞–π–∫')
                return -1
            elif item_index_int < 0 or item_index_int > len(recommendation_system.query_all_items(None)):
                print('–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü')
                return -1
            else:
                liked_items.append(item_index_int)
                print("–õ–∞–π–∫ –º–æ—Ç–æ—Ü–∏–∫–ª")
            return 0
        case 3:
            item_index_str = input()
            try:
                item_index_int = int(item_index_str)
            except:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ª–∞–π–∫–∞')
                return -1
            if not item_index_int in liked_items:
                print("–ú–æ—Ç–æ—Ü–∏–∫–ª –≤–Ω–µ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤")
                return -1
            else:
                del liked_items[liked_items.index[item_index_int]]
                print('–ú–æ—Ç–æ—Ü–∏–∫–ª —É–¥–µ–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤')
        case 4:
            item_index_str = input()
            try:
                item_index_int = int(item_index_str)
            except:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ª–∞–π–∫–∞')
                return -1
            if item_index_int in disliked_items:
                print('–ú–æ—Ç–æ—Ü–∏–∫–ª —É–∂–µ –ª–∞–π–∫')
                return -1
            elif item_index_int < 0 or item_index_int > len(recommendation_system.query_all_items(None)):
                print('–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü')
                return -1
            else:
                disliked_items.append(item_index_int)
                print("–î–∏–∑–ª–∞–π–∫ –º–æ—Ç–æ—Ü–∏–∫–ª")
        case 5:
            item_index_str = input()
            try:
                item_index_int = int(item_index_str)
            except:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ª–∞–π–∫–∞')
                return -1
            if not item_index_int in disliked_items:
                print("–ú–æ—Ç–æ—Ü–∏–∫–ª –≤–Ω–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤")
                return -1
            else:
                del disliked_items[disliked_items.index[item_index_int]]
                print('–ú–æ—Ç–æ—Ü–∏–∫–ª —É–¥–µ–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤')
        case 6:
            main_filter = set_filter(main_filter)
            return 0
        case 7:
            main_filter = Filter()
            return 0
        case 8:
            print_current_filter(main_filter)
            return 0
        case 9:
            return choose_measure_function(recommendation_system)
        case 10:
            return choose_recommendation_strategy(recommendation_system)
        case 11:
            all_items = recommendation_system.query_all_items(None)
            liked_items = [item for (i, item) in enumerate(all_items) if i in liked_items]
            disliked_items = [item for (i, item) in enumerate(all_items) if i in disliked_items]
            items = []
            if recommendation_system.recommendation_strategy == RecommendationStrategy.FilterRecommend:
                items = get_recommendation_after_filtration(recommendation_system, liked_items, disliked_items,
                                                            main_filter)
            for i, item in enumerate(items):
                print(
                    f"{i:2}) {item.name} {item.brand}: {item.color} –º–∞—Å—Å–∞={item.weight} "
                    f"–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è={item.engine_capacity}")
            return 0
        case 12:
            print("Out")
            return 1
        case _:
            print("Invalid menu")

    return 0


def choose_measure_function(recommendation_system: RecommendationSystem):
    choose_measure_option = ["Euclidean", "Cosine"]
    terminal_menu = TerminalMenu(choose_measure_option)
    selected_menu_index = terminal_menu.show()
    if selected_menu_index == 0:
        recommendation_system.calculate_measure_func(calculate_measure_using_euclidean_distance)
    elif selected_menu_index == 1:
        recommendation_system.calculate_measure_func(calculate_measure_using_cosine_distance)
    else:
        print("Choose measure function")

    return 0


def set_filter(filter_element: Filter) -> Filter:
    choose_measure_option = [
        "–ù–∞–∑–≤–∞–Ω–∏–µ",  # 0
        "–ú–∞—Ä–∫–∞",  # 1
        "–ú–∞—Å—Å–∞",  # 2
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è",  # 3
        "–¶–≤–µ—Ç",  # 4
        "–î–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç",  # 5
        "–í—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏",  # 6
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞",  # 7
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å",  # 8
        "–ú–æ—â–Ω–æ—Å—Ç—å",  # 9
        "–û–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞",  # 10
        "–ù–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ (–î–∞/–ù–µ—Ç)",  # 11
        "–ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ (–î–∞/–ù–µ—Ç)",  # 12
        "–í—ã—Å–æ—Ç–∞",  # 13
        "–ù–∞–ª–∏—á–∏–µ —Ñ–∞—Ä—ã (–î–∞/–ù–µ—Ç)",  # 14
        "–ù–∞–ª–∏—á–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ (–î–∞/–ù–µ—Ç)",  # 15
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",  # 16
        "–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å",  # 17
        "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π/–í–∞—Ä–∏–∞—Ç–æ—Ä)",  # 18
        "–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç",  # 19
        "–û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞",  # 20
        "–ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã",  # 21
    ]

    terminal_menu = TerminalMenu(choose_measure_option)
    selected_menu_index = terminal_menu.show()
    match selected_menu_index:
        case 0:
            filter_element.name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ : ")
        case 1:
            filter_element.brand = input("–ú–∞—Ä–∫–∞: ")
        case 2:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Å—Å–∞"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.weight_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ : "))
            else:
                filter_element.weight_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Å—Å–∞ : "))
        case 3:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.engine_capacity_min = float(input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è : "))
            else:
                filter_element.engine_capacity_min = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è : "))
        case 4:
            filter_element.color = input("–¶–≤–µ—Ç [–ö—Ä–∞—Å–Ω—ã–π, –ß–µ—Ä–Ω—ã–π, –°–∏–Ω–∏–π, –°–µ—Ä–æ–µ, –ñ–µ–ª—Ç—ã–π, –ó–µ–ª–µ–Ω—ã–π, –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π, –ë–µ–ª—ã–π]")
        case 5:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.ground_clearance_min = float(input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç : "))
            else:
                filter_element.ground_clearance_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç : "))
        case 6:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.landing_height_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏ : "))
            else:
                filter_element.landing_height_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏ : "))
        case 7:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.seats_min = float(input("–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞ : "))
            else:
                filter_element.seats_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞ : "))
        case 8:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.max_speed_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å : "))
            else:
                filter_element.max_speed_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å : "))
        case 9:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.power_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å : "))
            else:
                filter_element.power_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å : "))
        case 10:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.fuel_tank_capacity_min = float(input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞ : "))
            else:
                filter_element.fuel_tank_capacity_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞ : "))
        case 11:
            exist_element_input = input("–ù–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –î–∞ –∏–ª–∏ –ù–µ—Ç")
            if exist_element_input == "–î–∞":
                filter_element.exist_navigator = True
            elif exist_element_input == "–ù–µ—Ç":
                filter_element.exist_navigator = False
            else:
                print("–ù–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –î–∞ –∏–ª–∏ –ù–µ—Ç")
        case 12:
            exist_element_input = input("–ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –î–∞ –∏–ª–∏ –ù–µ—Ç")
            if exist_element_input == "–î–∞":
                filter_element.exist_compressor = True
            elif exist_element_input == "–ù–µ—Ç":
                filter_element.exist_compressor = False
            else:
                print("–ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –î–∞ –∏–ª–∏ –ù–µ—Ç")
        case 13:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.height_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ : "))
            else:
                filter_element.height_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ : "))
        case 14:
            exist_element_input = input("–ù–∞–ª–∏—á–∏–µ —Ñ–∞—Ä—ã –î–∞ –∏–ª–∏ –ù–µ—Ç")
            if exist_element_input == "–î–∞":
                filter_element.exist_headlight = True
            elif exist_element_input == "–ù–µ—Ç":
                filter_element.exist_headlight = False
            else:
                print("–ù–∞–ª–∏—á–∏–µ —Ñ–∞—Ä—ã –î–∞ –∏–ª–∏ –ù–µ—Ç")
        case 15:
            exist_element_input = input("–ù–∞–ª–∏—á–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ –î–∞ –∏–ª–∏ –ù–µ—Ç")
            if exist_element_input == "–î–∞":
                filter_element.exist_turn_signal = True
            elif exist_element_input == "–ù–µ—Ç":
                filter_element.exist_turn_signal = False
            else:
                print("–ù–∞–ª–∏—á–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ –î–∞ –∏–ª–∏ –ù–µ—Ç")
        case 16:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.cylinder_number_min = float(input("–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ : "))
            else:
                filter_element.cylinder_number_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ : "))
        case 17:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.load_capacity_min = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å : "))
            else:
                filter_element.load_capacity_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å : "))
        case 18:
            choose_option = TerminalMenu(["[0] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "[1] –í–∞—Ä–∏–∞—Ç–æ—Ä", "[2] –ù–µ –≤–∞–∂–Ω–æ"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.transmission = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            elif selected_index == 1:
                filter_element.transmission = "–í–∞—Ä–∏–∞—Ç–æ—Ä"
            else:
                filter_element.transmission = "Empty"
        case 19:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω—ã–π –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.torque_min = float(input("–ù–∞—á–∞–ª—å–Ω—ã–π –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç : "))
            else:
                filter_element.torque_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç : "))
        case 20:
            choose_option = TerminalMenu(["–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞", "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞"])
            selected_index = choose_option.show()
            if selected_index == 0:
                filter_element.trunk_volume_min = float(input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞ : "))
            else:
                filter_element.trunk_volume_max = float(input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞ : "))
        case 21:
            exist_element_input = input("–ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã –î–∞ –∏–ª–∏ –ù–µ—Ç")
            if exist_element_input == "–î–∞":
                filter_element.exist_radio_system = True
            elif exist_element_input == "–ù–µ—Ç":
                filter_element.exist_radio_system = False
            else:
                print("–ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã –î–∞ –∏–ª–∏ –ù–µ—Ç")

    return filter_element


def choose_recommendation_strategy(recommendation_system: RecommendationSystem):
    choose_strategy_option = ["–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è -> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è -> –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è"]
    terminal_menu = TerminalMenu(choose_strategy_option)
    selected_index = terminal_menu.show()

    if selected_index == 0:
        recommendation_system.recommendation_strategy = RecommendationStrategy.FilterRecommend
    elif selected_index == 1:
        recommendation_system.recommendation_strategy = RecommendationStrategy.RecommendFilter
    else:
        choose_recommendation_strategy(recommendation_system)
    return 0


def print_current_filter(filter_element: Filter):
    print("\n FILTER \n")
    print("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞: ", filter_element.name)
    print("–ú–∞—Ä–∫–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–∞: ", filter_element.brand)
    print("[MIN] –ú–∞—Å—Å–∞: ", filter_element.weight_min)
    print("[MAX] –ú–∞—Å—Å–∞: ", filter_element.weight_max)
    print("[MIN] –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: ", filter_element.engine_capacity_min)
    print("[MAX] –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: ", filter_element.engine_capacity_max)
    print("–¶–≤–µ—Ç: ", filter_element.color)
    print("[MIN] –î–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç: ", filter_element.ground_clearance_min)
    print("[MAX] –î–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–æ—Å–≤–µ—Ç: ", filter_element.ground_clearance_max)
    print("[MIN] –í—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏: ", filter_element.landing_height_min)
    print("[MAX] –í—ã—Å–æ—Ç–∞ –ø–æ—Å–∞–¥–∫–∏: ", filter_element.landing_height_max)
    print("[MIN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞: ", filter_element.seats_min)
    print("[MAX] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–∞: ", filter_element.seats_max)
    print("[MIN] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ", filter_element.max_speed_min)
    print("[MAX] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ", filter_element.max_speed_max)
    print("[MIN] –ú–æ—â–Ω–æ—Å—Ç—å: ", filter_element.power_min)
    print("[MAX] –ú–æ—â–Ω–æ—Å—Ç—å: ", filter_element.power_max)
    print("[MIN] –û–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞: ", filter_element.fuel_tank_capacity_min)
    print("[MAX] –û–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞: ", filter_element.fuel_tank_capacity_max)
    print("–ù–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ (–î–∞/–ù–µ—Ç): ", filter_element.exist_navigator)
    print("–ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ (–î–∞/–ù–µ—Ç): ", filter_element.exist_compressor)
    print("[MIN] –í—ã—Å–æ—Ç–∞: ", filter_element.height_min)
    print("[MAX] –í—ã—Å–æ—Ç–∞: ", filter_element.height_max)
    print("–ù–∞–ª–∏—á–∏–µ —Ñ–∞—Ä—ã (–î–∞/–ù–µ—Ç): ", filter_element.exist_headlight)
    print("–ù–∞–ª–∏—á–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ (–î–∞/–ù–µ—Ç): ", filter_element.exist_turn_signal)
    print("[MIN] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: ", filter_element.cylinder_number_min)
    print("[MAX] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: ", filter_element.cylinder_number_max)
    print("[MIN] –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: ", filter_element.load_capacity_min)
    print("[MAX] –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: ", filter_element.load_capacity_max)
    print("–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: ", filter_element.transmission)
    print("[MIN] –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç: ", filter_element.torque_min)
    print("[MAX] –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç: ", filter_element.torque_max)
    print("[MIN] –û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞: ", filter_element.trunk_volume_min)
    print("[MAX] –û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞: ", filter_element.trunk_volume_max)
    print("–ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã (–î–∞/–ù–µ—Ç): ", filter_element.exist_compressor)
